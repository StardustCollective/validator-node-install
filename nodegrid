#!/bin/bash

red='\033[1;31m'
grn='\033[1;32m'
yel='\033[1;33m'
blu='\033[1;36m'
clr='\033[0m'
pnk='\033[1;35m'
VERSION="1.30"

chars=2
spacer=' '
newl=''

OS=`uname -s`
if [[ "$OS" == "Darwin" ]]; then
   dcmd="gdate"
else
   dcmd="date"
fi

function checkVersion()
{
        webVer=$(curl -s https://raw.githubusercontent.com/zaemliss/Constellation/master/nodegrid | grep "VERSION=" | head -1 | tr -d '"' | tr '=' ' ' | awk '{print $2}')
        if [[ $webVer > $VERSION ]]; then
                echo
                echo -e "${grn} New version available! (${pnk}$webVer${grn})"
                COMMENT=$(curl -s curl -s https://api.github.com/repos/zaemliss/Constellation/commits?per_page=10 | jq ".[].commit.message" | tr -d '"' | grep "Update nodegrid" | head -n 1)
                echo -e " ${blu}"
                echo -e $COMMENT
                echo -e "${clr}"
                read -e -p " Press Y then [ENTER] to update or N to cancel: " CHOICE
                if [[ ("$CHOICE" == "y" || "$CHOICE" == "Y") ]]; then
                        wget https://raw.githubusercontent.com/zaemliss/Constellation/master/nodegrid -O /usr/local/bin/nodegrid >/dev/null 2>&1
                        echo -e "${grn} nodegrid ${blu}utility updated${clr}"
                        echo
                        exit 1
                fi
        fi
}
checkVersion

showVersion=$(echo $@ | grep -c -- "--version")
if [[ showVersion -gt 0 ]]; then
    echo
    echo -e "${blu}Nodegrid version ${yel}$VERSION${clr}"
    echo
    exit 1
fi

downnodes=0
### ASSIGN THE PROPER LOAD BALANCER ###
if [[ $1 = "--testnet" ]]; then
        LB="http://cl-lb-alb-testnet-1216020584.us-west-1.elb.amazonaws.com:9000/cluster/info"
else
        LB="http://lb.constellationnetwork.io:9000/cluster/info"
fi

### GET LIST OF IPS FROM LOAD BALANCER AND LIST THEM OUT ###
echo -e "${pnk}##${spacer}ip               \tVersion\tSnap\tState\tExecTime${clr}"

curl -s $LB > xfile.log
curated=$(cat xfile.log)
terminator=${curated: -1}

if [ $terminator = "]" ]; then
	IPS=$(curl -s $LB | jq -r 'sort_by(.ip.host)[] | .ip.host')
else
        echo -e "${red}Load balancer returned malformed JSON${clr}"
	exit 1
fi

count=1
for ip in $IPS; do
  start=$(($($dcmd +%s%N | tr -d 'N')/1000000))
  metrics=$(curl -s http://$ip:9000/metrics)
  end=$(($($dcmd +%s%N | tr -d 'N')/1000000))
  execTime=$(expr $end - $start)
  nodeVersion=$(echo $metrics | jq -r .[].version)
  nodeState=$(echo $metrics | jq -r .[].nodeState | cut -c 1-5)
  lastSnap=$(echo $metrics  | jq -r .[].lastSnapshotHeight)
  #addr=$(curl -s http://$ip:9000/metrics | jq -r .[].address)
  printf -v fcount "%02d" $count
  echo -e "${yel}$fcount$spacer${blu}$ip   \t$nodeVersion\t$lastSnap\t$nodeState\t$execTime${clr}"
  imgout="$imgout$fcount$spacer$ip$spacer$nodeVersion\n"
  ((count++))
done
totalnodes=$((count-1))
echo

### MAKE TOP ROW NUMBERED HEADER FOR NODES IN IP LIST ###
imgout="$imgout\n__"
echo -ne '  '
count=1
for ip in $IPS; do
  printf -v fcount "%02d" $count
  echo -ne "$spacer$fcount"
  imgout="$imgout$spacer$fcount"
  ((count++))
done
echo -e "\n"
imgout="$imgout\n"

### RUN THROUGH IPs AND GET NODE'S VIEW OF THE CLUSTER ###
count=1
for ip in $IPS; do
  statuses=($(curl -s http://$ip:9000/cluster/info | jq -r 'sort_by(.ip.host)[] | "\(.status)"'))
  seenIPs=($(curl -s http://$ip:9000/cluster/info | jq -r 'sort_by(.ip.host)[] | "\(.ip.host)"'))
  printf -v fcount "%02d" $count
  echo -ne $fcount
  imgout="$imgout$fcount"
  scount=0
  for eachIPS in $IPS; do
    ipseenbynode=$(printf '%s\n' "${seenIPs[@]}" | grep -n $eachIPS | head -n 1 | cut -d: -f1)
    if [[ $ipseenbynode -gt "0" ]]; then
        status="${statuses[$((ipseenbynode-1))]}"
    else
        status="Offline"
    fi

    case $status in
        Ready)
                color="${grn}"
                imgcol="■■"
                ;;
        Offline)
                color="${red}"
                imgcol="»«"
                ;;
        *)
                color="${yel}"
                imgcol="≡≡"
                ;;
    esac
    if [[ $status = "Offline" ]]; then
      echo -ne "$spacer${color}■■${clr}";
      imgout="$imgout$spacer$imgcol"
      endResult="${endResult}\n${blu}$ip${clr} sees node #${yel}$scount${clr} in status $color$status${clr}"
      alertResult="${alertResult}\n$ip sees node #$sount in status $status !"
      ((downnodes++))
    else
      echo -ne "$spacer${color}■■${clr}";
      imgout="$imgout$spacer$imgcol"
    fi
  ((scount++))
  done
  echo -e $newl
  imgout="$imgout\n"
  ((count++))
done
echo

nodestates=$(cat $HOME/nodestates) > /dev/null 2>&1
if [[ $downnodes -ne $nodestates ]]; then
      echo $downnodes > $HOME/nodestates
	   xrez=$((50+(21*totalnodes)))
   	yrez=$((50+(30*totalnodes)))
	   csize="${xrez}x${yrez}"
      if [ -f "$HOME/webhook" ]; then
           url=$(cat $HOME/webhook | tr -d '\n')
           echo -e $imgout > $HOME/imageout.txt
           convert -size $csize xc:black -font "DejaVu-Sans-Mono" -pointsize 12 -fill white -annotate +15+15 "@$HOME/imageout.txt" image.png > /dev/null 2>&1
           curl -s -F "file=@image.png" $url > /dev/null 2>&1
       fi
fi
