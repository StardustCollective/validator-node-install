# Declare Variables ###############################
red='\033[1;31m'
grn='\033[1;32m'
yel='\033[1;33m'
blu='\033[1;36m'
pnk='\033[1;35m'
clr='\033[0m'

DAG_VERSION="2.03"
JAR_VERSION=$(curl -s "https://api.github.com/repos/Constellation-Labs/constellation/releases?per_page=1" | jq ".[0].tag_name" | tr -d '"v')

# Only get external IP if needed
if [[ $1 == "" || $1 == "restart" || $1 == "reset" || $1 == "join" || $1 == "leave" ]]; then
        echo -ne "${grn} getting external IP address... ";
        externalHostIp=$(curl -s https://ipv4.icanhazip.com/)
        echo -e "${yel}$externalHostIp ${clr}";
fi

dagDir=$HOME/constellation
diskFree=$(df -l --output=source,avail / | awk '{print $2}' | awk 'NR==2')
dfFormated=$(echo $diskFree | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta')
INSTALLED_VERSION=$(java -jar $dagDir/cl-node.jar --version | grep "constellation" | awk '{print $NF}')

# Declare Functions #################################
function checkDepends() ####### <<
{
	jq --version > /dev/null 2>&1
	if [ $? -ne 0 ]; then
                echo -e "${yel}jq ${grn} not found! Installing...${clr}"
                apt install jq -qq > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                        echo -e "${red}Installation failed! please run manually and check for errors:${clr}"
                        echo -e "${blue}apt install jq${clr}"
                        echo
                        exit 1
                fi
	fi
        
        if type -p java >/dev/null 2>&1; then
                _java=java
        elif [[ -n "$JAVA_HOME" ]] && [[ -x "$JAVA_HOME/bin/java" ]];  then
                _java="$JAVA_HOME/bin/java"
        fi
        if [[ "$_java" ]]; then
                javaver=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}')
                if [[ "$javaver" > "1.8" ]]; then
                        # echo -e " ${grn}Java already at ${blu}$javaver${clr}"
                        installJava=0
                else
                        installJava=1
                fi
        else
                installJava=1
        fi

        if [[ "$installJava" == "1" ]]; then
                echo -e " ${pnk}Installing latest Java version...${clr}"
                sudo apt install -y openjdk-8-jdk
                if [ $? -ne 0 ]; then
                        echo -e "${red}Installation failed! please run manually and check for errors:${clr}"
                        echo -e "${blue}apt install openjdk-8-jdk openjdk-8-jre${clr}"
                        echo
                        exit 1
                fi
	fi

        havegedinstalled=$(find /usr -name "haveged")
        if [ ${#havegedinstalled} -lt "5" ]; then
                echo -e " ${pnk}Installing latest version of Haveged...${clr}"
                apt install haveged -qq > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                        echo -e "${red}Installation failed! please run manually and check for errors:${clr}"
                        echo -e "${blue}apt install haveged${clr}"
                        echo
                        exit 1
                fi
        fi
}

function checkConfig()
{
	if [ -f "$dagDir/config" ]; then
                # read config file and export variables
                while read -r PARAM; do
                        export "$PARAM"
                done < $dagDir/config
	else
		echo -e "${red}Config File Doesn't exist${clr}"
                read -e -p " Proceed to installation? Press Y then [ENTER] to install or N to cancel: " CHOICE
                if [[ ("$CHOICE" == "y" || "$CHOICE" == "Y") ]]; then
                        doInstall
                fi
	fi
}

function checkVersion()
{
        webVer=$(curl -s https://raw.githubusercontent.com/zaemliss/Constellation/master/dag | grep "DAG_VERSION=" | head -1 | tr -d '"' | tr '=' ' ' | awk '{print $2}')
        if [[ "$webVer" != "$DAG_VERSION" ]]; then
                echo
                echo -e "${grn} New version available! (${blu}$webVer${grn})${yel}"
                echo -e "${clr}"
                read -e -p " Press Y then [ENTER] to update or N to cancel: " CHOICE
                if [[ ("$CHOICE" == "y" || "$CHOICE" == "Y") ]]; then
                        wget https://raw.githubusercontent.com/zaemliss/Constellation/master/dag -O /usr/local/bin/dag >/dev/null 2>&1
                        echo -e "${grn} dag ${blu}utility updated${clr}"
                        echo
                        exit 1;
                fi
        fi
}

function showStatus()
{
        # Can I see the webpage?
        chkWeb=$(curl -s http://$externalHostIp:9000 | grep -c constellation)
        echo
        if (( chkWeb > 0 )); then
                echo -e "${blu} Web Status             : ${grn}online${clr}"
        else
                echo -e "${blu} Web Status             : ${red}offline${clr}"
        fi

        # Is the screen containing the node execution active?
        chkScreen=$(screen -ls | grep dag)
        if [ -z "$chkScreen" ]; then
                echo -e "${blu} Node Status            : ${red}offline${clr}"
        else
                echo -e "${blu} Node Status            : ${grn}online${clr}"
        fi
      
        if [[ $diskFree -lt 1000000 ]]; then
                echo -e "${blu} Free Disk Space        : ${red}$dfFormated kb${clr}"
                echo -e "${blu}                          ${red}Your node will stop if it can't write to disk!${clr}"
        else
                echo -e "${blu} Free Disk Space        : ${grn}$dfFormated kb${clr}"
        fi
                echo -e "${blu} Official .jar version  : ${grn}$JAR_VERSION ${clr}"
                echo -ne "${blu} Installed .jar version : "
                if [[ $INSTALLED_VERSION == $JAR_VERSION ]]; then
                        echo -ne "${grn}"
                else 
                        echo -ne "${red}"
                fi
                echo -e "$INSTALLED_VERSION ${clr}"
}

function showHelp()
{
        echo
        echo -e " ${red}dag command line options ${blu}(utility version: $DAG_VERSION)${clr}"
        echo
        echo -e " ${yel} dag address        ${blu}restarts the node ${clr}"
        echo -e " ${yel} dag update         ${blu}gets the latest version of the jar and overwrites the file in $HOME/constellation ${clr}"
        echo -e " ${yel} dag restart        ${blu}restarts the node ${clr}"
        echo -e " ${yel} dag reset          ${blu}resets the tmp folder and restarts the node removing it from any cluster it belongs to.${clr}"
        echo -e " ${yel} dag join ip_addr   ${blu}joins to node specified in ip_addr ${clr}"
        echo -e " ${yel} dag leave          ${blu}leaves the cluster ${clr}"
        echo -e " ${yel} dag logs [search]  ${blu}displays the app logs in real time OR if a parameter is supplied, returns matching results in ${grn}search${clr}"
        echo
        echo -e " ${grn}you can navigate to your node via web browser by entering ${blu}http://$externalHostIp:9000 ${grn}in the address bar.${clr}"
        echo
}

function showLogs()
{
        echo
        if [[ $2 != "" ]]; then
            cat $dagDir/logs/app.log | grep -i $2
        else
            echo -e "${grn} This will show you the current logs. Once you see the node output, exit by pressing ${blu}CTRL-C"
            echo -e "${grn} This only shows the logs and does not interact with the node.${clr}"
            read -e -p " Press [ENTER] to continue or N to cancel: " CHOICE
            if [[ ("$CHOICE" == "n" || "$CHOICE" == "N") ]]; then
                echo -e "${yel} Aborted... ${clr}"
                exit 1;
            fi
            tail -f $dagDir/logs/app.log
        fi
}

function enterScreen()
{
        echo
        echo -e "${red} IMPORTANT: ${grn}once in the screen where you see the node output, exit by pressing ${blu}CTRL-A ${grn}then ${blu}CTRL-D"
        echo -e "${grn} Do ${red}NOT ${grn}press ${blu}CTRL-C ${grn}unless you are trying to stop the node!${clr}"
        read -e -p "Press [ENTER] to continue or N to cancel: " CHOICE
        if [[ ("$CHOICE" == "n" || "$CHOICE" == "N") ]]; then
        echo -e "${yel} Aborted... ${clr}"
        exit 1;
        fi
        screen -x dag
}

function update()
{
        echo
        echo -e "${grn}Updating from ${blu}$INSTALLED_VERSION ${grn}to ${blu}$JAR_VERSION"
        echo -e "${blu} Getting latest version and saving to $HOME/constellation ..."
        echo -e "${brn} (this can take a few minutes) ${clr}"
        wget https://github.com/Constellation-Labs/constellation/releases/download/v$JAR_VERSION/cl-keytool.jar -O $dagDir/cl-keytool.jar >/dev/null 2>&1
        wget https://github.com/Constellation-Labs/constellation/releases/download/v$JAR_VERSION/cl-node.jar -O $dagDir/cl-node.jar >/dev/null 2>&1
        wget https://github.com/Constellation-Labs/constellation/releases/download/v$JAR_VERSION/cl-wallet.jar -O $dagDir/cl-wallet.jar >/dev/null 2>&1
        wget https://github.com/Constellation-Labs/constellation/releases/download/v$JAR_VERSION/whitelisting -O $dagDir/whitelisting >/dev/null 2>&1
        wget https://raw.githubusercontent.com/Constellation-Labs/constellation/dev/src/main/resources/logback-prod.xml -O $dagDir/logback.xml >/dev/null 2>&1
        echo -e "${grn} latest Jar updated. Please do ${yel}dag restart${grn} or ${yel}dag reset${grn} (as required) for the changes to take effect.${clr}"
        echo
}

function restart()
{
        echo
        echo -e "${blu} Restarting node ..."
        pgrep java | xargs kill -9 >/dev/null 2>&1
        cd $dagDir

        echo -e "${grn} Deploying on $externalHostIp ...${clr}"
        bashexec="java -Xms1024M -Xmx$MAXMEM -Xss256K -Dlogback.configurationFile=$dagDir/logback.xml -jar $dagDir/cl-node.jar --ip=$externalHostIp --port=9000 -k=$KEYSTORE --alias alias -w $dagDir/whitelisting"
	screen -dmS dag $bashexec
	echo -e "${blu} Executing: ${yel} $bashexec"
        echo -e "${grn} The node is restarted.${clr}"
        echo
        echo -e "${grn} Type ${yel}dag status${grn} to see node output.${clr}"
        echo
}

function showAddress()
{
	echo
        read -s -p "Key Password   :" KEYPASS
        echo
        read -s -p "Store Password :" STOREPASS
        echo -e "${grn}"
        java -jar $dagDir/cl-wallet.jar show-address --keystore $KEYSTORE --alias $NODEALIAS --storepass $STOREPASS --keypass $KEYPASS
        echo -e "${clr}"
}

function reset()
{
        pgrep java | xargs kill -9 >/dev/null 2>&1
        sleep 5
        rm -rf $dagDir/tmp/* >/dev/null 2>&1
        rm -rf $dagDir/.dag >/dev/null 2>&1

        cd $dagDir
        echo -e "${grn} Resetting tmp folder and deploying on $externalHostIp ...${clr}"
        sleep 5
	bashexec="java -Xms1024M -Xmx$MAXMEM -Xss256K -Dlogback.configurationFile=$dagDir/logback.xml -jar $dagDir/cl-node.jar --ip=$externalHostIp --port=9000 -k=$KEYSTORE --alias alias -w $dagDir/whitelisting"
        screen -dmS dag $bashexec
        echo -e "${grn} The node is reset and started.${clr}"
        echo -e "${grn} Please make sure to wait at least 2-3 minutes before accessing the web page or joining a cluster.${clr}"
        echo -e "${grn} Your node is ready when doing ${blu}dag logs ${grn}are past keypair generation and are scrolling with information.${clr}"
        echo
        echo -e "${grn} Type ${yel}dag logs${grn} to see node output.${clr}"
        echo
}

function checkDir()
{
        if [[ ! -d $home/constellation ]]; then
                mkdir $home/constellation
        fi
}

function doInstall()
{
        SAVEWALLETPASS=0
        SAVESTOREPASS=0

        clear
        #checkDepends
        #checkDir
        #update
        echo -ne "${blu}1. ${grn}How much memory (in gigabytes, Minimum 3) would you like to allocate to running the node? e.g.: 4  ${clr}"
        read -e -p ": " MAXMEMORY
        if [[ "$MAXMEM" -lt "3" ]];then
                MAXMEMORY=3
        fi
        export MAXMEM=$MAXMEMORY

        echo -e "${blu}3. ${grn}Please enter a Wallet password. Make sure you write it down and store it in a safe place! "
        echo -e "${red}   WARNING If you lose this password, you will lose access to your tokens!${clr}"
        
        goodPass=0
        while [ "$goodPass" -ne "1" ]
        do
                read -s -p "KeyPassword     :" KEYPASS1
                echo
                read -s -p "Retype Password :" KEYPASS2
                echo
                if [[ "$KEYPASS1" == "$KEYPASS2" ]];then
                        export KEYPASS=$KEYPASS1
                        goodPass=1
                else
                        echo -e "${red}Passwords do not match!${clr}"
                        echo
                        goodPass=0
                fi
        done

        
        echo -e "${blu}3. ${grn}Please enter a Store password. Make sure you write it down and store it in a safe place! "
        echo -e "${red}   WARNING If you lose this password, you will lose access!${clr}"
        
        goodPass=0
        while [ "$goodPass" -ne "1" ]
        do
                read -s -p "StorePassword     :" STOREPASS1
                echo
                read -s -p "Retype Password :" STOREPASS2
                echo
                if [[ "$STOREPASS1" == "$STOREPASS2" ]];then
                        export STOREPASS=$STOREPASS1
                        goodPass=1
                else
                        echo -e "${red}Passwords do not match!${clr}"
                        echo
                        goodPass=0
                fi
        done

        echo -ne "${blu}4. ${grn}Do you already have a p12 file you'd like to use? [y/n] :${clr}"
        read -e -p ": " YN
        echo
        if [[ "$YN" == "y" ]] || [[ "$YN" == "Y" ]];then
                goodFile=0
                while [[ "$goodFile" -ne "1" ]]
                do
                        read -e -p "please enter the FULL path of the p12 file e.x.:/root/constellation/testfile.p12 :" P12FILE
                        if [[ ! -f $P12FILE ]];then
                                echo -e "${red}File does not exist!"
                                echo
                                goodFile=0
                        else
                                goodFile=1
                                export KEYSTORE=$P12FILE
                        fi
                done
        else
                        read -e -p "please enter the FULL path of the p12 file you want to create. e.x.: /root/constellation/testfile.p12 :" P12FILE
                        export KEYSTORE=$P12FILE

        fi
        
        echo -e "${blu}5. ${grn}Please enter an alias for the node (e.x.: myalias) :${clr}"
        read -e -p "Please enter the Alias for the node :" MYNODEALIAS
        export NODEALIAS=$MYNODEALIAS

        java -jar $dagDir/cl-keytool.jar --keystore $KEYSTORE --alias $NODEALIAS --storepass $STOREPASS --keypass $KEYPASS
        if [ $? -ne 0 ]; then
                echo -e "${red}KeyStore generation failed! please check the information you supplied and try again:${clr}"
                exit 1
        else
                echo -e "${grn}KeyStore generation success! ${clr}"
        fi
        export CL_STOREPASS=$STOREPASS
        export CL_KEYPASS=$KEYPASS
        
        echo "${blu} Starting the node..."
        reset
        echo

        echo -ne "${blu}5. ${grn}Would you like to join a cluster at this time? (you can always do this later) [y/n] :${clr}"
        read -e -p ": " YN
        echo
        if [[ "$YN" == "y" ]] || [[ "$YN" == "Y" ]];then
                echo -e "${blu}5. ${grn}Please enter the IP address of the Genesis Node e.x.: 103.55.126.22${clr}"
                read -e -p "Please enter the IP Address for the node :" GENESIS
                echo -e "${grn} Joining $GENESIS ...${clr}"
                curl -X POST http://$externalHostIp:9001/join -H "Content-type: application/json" -d '{ "host": "'$GENESIS'", "port": 9001 }' -v
                if [ $? -ne 0 ]; then
                        echo
                        echo -e "${red}Joining node ${yel}$GENESIS ${red}failed! ${clr}"
                        exit 1;
                fi
        fi

cat <<EOF > $dagDir/config
MAXMEM=$MAXMEM
KEYSTORE=$KEYSTORE
GENESIS=$GENESIS
NODEALIAS=$NODEALIAS

EOF
echo
echo -e "${grn} Installation complete.${clr}"
showStatus
showHelp

}
# Begin ###############################

checkConfig
checkDepends
checkVersion


if [[ $1 == "update" ]]; then
        update
fi

if [[ $1 == "restart" ]]; then
        restart
fi

if [[ $1 == "reset" ]]; then
        echo
        echo -e "${blu} Resetting node ..."
        echo -e " ${red}ARE YOU SURE?${blu} resetting the node will remove it from any cluster!${clr}"
        read -e -p " Press [ENTER] to continue or N to cancel: " CHOICE
        if [[ ("$CHOICE" == "n" || "$CHOICE" == "N") ]]; then
        echo -e "${yel} Aborted... ${clr}"
        exit 1;
        fi
        echo -e "${grn} Terminating instance...${clr}"
        reset
        
fi

if [[ $1 == "status" ]]; then
        enterScreen
fi

if [[ $1 == "logs" ]]; then
        showLogs $1 $2 $3
fi

if [[ $1 == "" ]]; then
        showStatus
        showHelp
fi
if [[ $1 == "address" ]]; then
        showAddress
fi
if [[ $1 == "join" ]]; then
        if [[ $2 == "" ]]; then
                echo
                echo -e "${red} you must specify an IP address!"
                echo -e "${grn} Ex.: ${yel}dag join 20.145.2.11 ${clr}"
                echo -e
                exit 1
        fi
        echo
        echo -e "${grn} Joining $2 ...${clr}"
        curl -X POST http://$externalHostIp:9001/join -H "Content-type: application/json" -d '{ "host": "'$2'", "port": 9001 }' -v
        if [ $? -ne 0 ]; then
        echo
        echo -e "${red}Joining node ${yel}$2 ${red}failed! ${clr}"
        exit 1;
    fi
fi

if [[ $1 == "leave" ]]; then
        echo
        echo -e "${grn} Leaving cluster ...${clr}"
        curl -X POST http://$externalHostIp:9001/leave -v
fi
